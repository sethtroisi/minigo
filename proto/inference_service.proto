// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package minigo;

// TODO(tommadams): Investigate enabling arenas with:
//   option cc_enable_arenas = true;

service InferenceService {
  // Called by the inference worker to get the server's configuration.
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
  }

  // Called by the inference worker to fetch the next batch of features to
  // run. The returned batch is of fixed size, GetConfigResponse.batch_size.
  // If there aren't enough inference requests pending to fill a batch, the
  // batch is padded with zeros.
  // The response is tagged with a batch ID. The same batch ID should be set
  // in the PutOutputResquest that sends the inference output back to the
  // server,
  rpc GetFeatures(GetFeaturesRequest) returns (GetFeaturesResponse) {
  }

  // Called by the inference worker to write back the inference outputs.
  // The batch ID in the PutOutputRequest must match the ID from the previous
  // call to GetFeaturesRequest.
  rpc PutOutputs(PutOutputsRequest) returns (PutOutputsResponse) {
  }
}

message GetConfigRequest {
}

message GetConfigResponse {
  int32 board_size = 1;
  int32 batch_size = 2;
}

message GetFeaturesRequest {
}

message GetFeaturesResponse {
  int32 batch_id = 1;
  repeated float features = 2;
}

message PutOutputsRequest {
  int32 batch_id = 1;
  repeated float policy = 2;
  repeated float value = 3;
}

message PutOutputsResponse {
}
